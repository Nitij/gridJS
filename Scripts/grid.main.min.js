(function (e, t, n) { "use strict"; function L(e) { return typeof e === "function" } function A() { var e = t.createElement("span"); e.innerHTML = "&nbsp;"; return e } function O() { var e = t.createElement("a"); e.setAttribute("href", "#"); e.style.textDecoration = "none"; e.style.paddingLeft = "2px"; e.style.paddingRight = "2px"; e.style.display = "inline-block"; return e } function M(e) { if (!z(e) && typeof e === "function") { e() } } function _(e) { var t = 0, n, r, i; for (; t < e.length; t++) { n = e[t]; i = this._grid.querySelector("#" + n.id); r = H.bind(i, [this, n.rowIndex, n.propToBind]); switch (i.type) { case a: case f: case l: case h: case p: case d: case v: case m: case g: case y: case b: case w: i.onchange = r; break; case c: i.onclick = r; break } } } function D(e, n, r, i) { var s, o = null, S = null, x = null, T = "", N = this._dataRowBackColors.length > 0, C = 0, k = 0, L = this._dataElement.querySelectorAll(u), A = this._dataSource, O = null, M = {}; if (z(n)) { n = [] } s = document.createElement("tr"); s.setAttribute("id", this._gridID + "_dataRow_" + e); s.setAttribute("class", this._dataElement.className); if (N) { s.style.backgroundColor = this._dataRowBackColors[i] } if (r && this._hasMouseOverColor) { s.onmouseover = B.bind(null, [s, this._mouseOverColor]); s.onmouseout = B.bind(null, [s, s.style.backgroundColor]) } for (; C < L.length; C++) { o = document.createElement("td"); o.setAttribute("class", L[C].className); o.innerHTML = T = L[C].innerHTML; S = o.children; for (; k < S.length; k++) { x = S[k]; if (x.id !== "") { x.id = S[k].id += "_" + e; x.setAttribute("rowId", e) } if (this._bindInput) { switch (x.tagName.toLowerCase()) { case "input": if (x.getAttribute(E)) { n.push(P(x, e)); switch (x.type) { case a: case f: case l: case h: case p: case d: case v: case m: case g: case y: case b: case w: O = t.createAttribute("value"); O.value = x.getAttribute(E); S[k].setAttributeNode(O); break; case c: if (F(x.getAttribute(E), A, e, this._customFunctions, this._hasCustomBindings) === "true") { O = t.createAttribute("checked"); S[k].setAttributeNode(O) } break } } break } } } k = 0; T = F(o.innerHTML, A, e, this._customFunctions, this._hasCustomBindings); o.innerHTML = T; s.appendChild(o) } if (this._hasRowAddHandler) { s = this._rowAddHandler(s, A, e) } M["dataRow"] = s; M["inputBindings"] = n; return M } function P(e, t) { var n = "", r = "", i = null, s = null, o = null, u = null, a = "", f = {}; n = e.getAttribute("model"); i = n.indexOf("{{"); s = n.indexOf("}}"); o = i + 2; u = s - 1; a = n.substr(o, u - o + 1); f["id"] = e.id; f["rowIndex"] = t; f["propToBind"] = a; return f } function H(e) { var t = null, n = e[0], r = e[1], i = e[2], s = null; switch (this.type) { case a: case f: case l: case h: case p: case d: case v: case m: case g: case y: case b: case w: t = this.value; break; case c: t = this.checked; break } n._dataSource[r][i] = t; n._dataChanges["row" + r] = n._dataSource[r]; if (n._updateRowOnDataChange) { n.reDrawRow.call(n, r) } } function B(e) { var t = e[0], n = e[1]; t.style.backgroundColor = n } function j(e) { if (!z(this._beforeGridPageChange)) this._beforeGridPageChange(e[0]); if (this._allowPageChange) { this._currentPageNumber = e[0]; M(this._onGridPageChange); this.reDraw() } return false } function F(e, t, n, r, i) { var s = 0, o = e.length, u = "", a = 0, f = 0, l = 0, c = 0, h = "", p = "", d = e, v = t[n], m = null; for (; s < o; s++) { if (s < o) { u = e.substr(s, 2); if (u === "{{") { a = s; l = s + 2 } else if (u === "}}") { f = s + 1; c = s - 1; h = e.substr(a, f - a + 1); p = e.substr(l, c - l + 1); if (!I(p)) { m = R(v, p); d = d.replace(h, z(m) ? "" : m) } else { if (i) { d = d.replace(h, q(p, t, n, r)) } else { d = d.replace(h, "") } } d = d.replace(S, x); d = d.replace(T, N) } } } return d } function I(e) { var t = e.length; if (t) { if (e.substr(t - 2, 2) === "()") { return true } else { return false } } } function q(e, t, n, r) { var i = e.replace("()", ""), i = r[i]; if (!z(i)) { return i(t, n) } } function R(e, t) { var n = 0, r = t.length, i = "", s = 0, o = 0, u = "", a = false; for (; n < r; n++) { if (n < r) { i = t.substr(n, 1); if (a) { s = n; a = false } if ((i === "[" || i === "." || i === "]") && n < r - 1) { o = n; e = U(t, e, s, o); a = true } if (n === r - 1) { if (i === "]") { o = n } else { o = n + 1 } e = U(t, e, s, o); a = true } } } return e } function U(e, t, n, r) { var i = e.substr(n, r - n); if (i.length > 0) { t = t[i] } return t } function z(e) { return e === null || e === n } var r = null; var i = "headerRow", s = "dataRow", o = "footerRow", u = "column", a = "text", f = "number", l = "password", c = "checkbox", h = "search", p = "tel", d = "url", v = "email", m = "time", g = "datetime", y = "date", b = "month", w = "week", E = "model", S = "model-src", x = "src", T = "model-style", N = "style"; var C = 1, k = 5; if (t.registerElement) { t.registerElement("gridjs-grid") } r = function (e) { var n = null, r = null, i = e; this._sourceGrid = null; this._grid = null; this._gridID = null; this._dataSource = null; this._dataItemCount = 0; this._dataRowBackColors = []; this._cellPadding = k; this._hasRowAddHandler = false; this._rowAddHandler = null; this._hasMouseOverColor = false; this._mouseOverColor = ""; this._hasPagination = false; this._pageRowCount = 0; this._currentPageNumber = C; this._headerElement = null; this._dataElement = null; this._footerElement = null; this._pageButtonNormalCss = ""; this._pageButtonActiveCss = ""; this._dataChanges = {}; this._bindInput = true; this._updateRowOnDataChange = true; this._customFunctions = {}; this._hasCustomBindings = false; this._allowPageChange = true; this._onGridLoaded = null; this._onGridPageChange = null; this._beforeGridPageChange = null; this._onRowRedrawComplete = null; if (i["gridId"]) { this._sourceGrid = t.createElement("gridjs"); this._gridID = i["gridId"]; this._grid = t.querySelector("#" + i["gridId"]); this._sourceGrid.innerHTML = this._grid.innerHTML } if (i["dataSource"]) { this._dataSource = i["dataSource"]; this._dataItemCount = i["dataSource"].length } if (!z(i["updateDataRowOnInputChange"])) this._updateRowOnDataChange = i["updateDataRowOnInputChange"]; n = i["beforeGridPageChange"]; if (n && L(n)) this._beforeGridPageChange = n; n = i["onRowRedrawComplete"]; if (n && L(n)) this._onRowRedrawComplete = n; n = i["onGridPageChange"]; if (n && L(n)) this._onGridPageChange = n; n = i["onGridLoaded"]; if (n && L(n)) this._onGridLoaded = n; this._allowPageChange = i["allowPageChange"] || true; this._bindInput = i["disableInputBindings"] || true; r = i["pageButtonCss"]; if (r) { this._pageButtonNormalCss = r["normalCss"]; this._pageButtonActiveCss = r["activeCss"] } if (i["pagination"]) { this._hasPagination = true; this._pageRowCount = i["pagination"] } r = i["dataRowColors"]; if (r && r.length && typeof r !== "[Object object]") this._dataRowBackColors = r; r = i["cellPadding"]; if (r) this._cellPadding = r; n = i["onRowAddition"]; if (n && L(n)) { this._hasRowAddHandler = true; this._rowAddHandler = n } r = i["mouseOverColor"]; if (r) { this._hasMouseOverColor = true; this._mouseOverColor = r } return this }; r.prototype = { updateDataRowOnInputChange: function (e) { this._updateRowOnDataChange = e; return this }, beforeGridPageChange: function (e) { if (L(e)) this._beforeGridPageChange = e; return this }, onRowRedrawComplete: function (e) { if (L(e)) this._onRowRedrawComplete = e; return this }, onGridPageChange: function (e) { if (L(e)) this._onGridPageChange = e; return this }, onGridLoaded: function (e) { if (L(e)) this._onGridLoaded = e; return this }, allowPageChange: function (e) { this._allowPageChange = e; return this }, addCustomFunction: function (e, t) { this._customFunctions[e] = t; this._hasCustomBindings = true; return this }, disableInputBindings: function (e) { this._bindInput = e; return this }, setPageButtonCss: function (e, t) { this._pageButtonNormalCss = e; this._pageButtonActiveCss = t; return this }, init: function () { this._headerElement = this._sourceGrid.querySelector(i); this._dataElement = this._sourceGrid.querySelector(s); this._footerElement = this._sourceGrid.querySelector(o); return this }, draw: function () { this.init().reDraw(); return this }, setPagination: function (e) { this._hasPagination = true; this._pageRowCount = e; return this }, getGrid: function (e) { this._gridID = e; this._sourceGrid = t.createElement("gridjs"); this._grid = t.querySelector("#" + e); this._sourceGrid.innerHTML = this._grid.innerHTML; return this }, dataSource: function (e) { this._dataSource = e; this._dataItemCount = e.length; return this }, reDraw: function () { var e = this._dataSource, n = this._headerElement, r = n.querySelectorAll(u), i = this._dataElement, s = i.querySelectorAll(u), o = this._footerElement, a = o.querySelectorAll(u), f = 0, l = 0, c = 0, h = 0, p = null, d = null, v = null, m = "", g = null, y = null, b = null, w = null, E = null, S = null, x = null, T = null, N = this._dataRowBackColors.length > 0, C = null, k = null, L = null, P = null, H = [], B = null, F = null; w = t.createElement("table"); w.setAttribute("cellspacing", 0); w.setAttribute("cellpadding", this._cellPadding); w.setAttribute("class", this._grid.className); g = t.createElement("tr"); g.setAttribute("class", n.className); for (; f < r.length; f++) { E = document.createElement("td"); E.setAttribute("class", r[f].className); E.innerHTML = r[f].innerHTML; g.appendChild(E) } w.appendChild(g); p = e.length; if (this._hasPagination) { d = 0 + this._currentPageNumber * this._pageRowCount - this._pageRowCount; v = this._currentPageNumber * this._pageRowCount; if (v > p) v = p } else { d = 0; v = p } for (; d < v; d++) { if (h === this._dataRowBackColors.length) { h = 0 } B = D.call(this, d, H, true, h); h++; w.appendChild(B.dataRow); H = B.inputBindings; l = 0 } f = 0; b = t.createElement("tr"); b.setAttribute("class", o.className); for (; f < a.length; f++) { x = document.createElement("td"); x.setAttribute("class", a[f].className); x.innerHTML = a[f].innerHTML; b.appendChild(x) } w.appendChild(b); if (this._hasPagination) { C = t.createElement("div"); C.setAttribute("class", this._grid.className); C.style.textAlign = "center"; C.style.textDecoration = "none"; C.style.paddingTop = "4px"; if (this._currentPageNumber > 1) { k = O(); k.setAttribute("class", this._pageButtonNormalCss); k.innerHTML = "<"; L = j.bind(this, [this._currentPageNumber - 1]); k.onclick = L; C.appendChild(k); C.appendChild(A()) } f = 1; l = parseInt(p / this._pageRowCount); if (p % this._pageRowCount > 0) l++; for (; f <= l; f++) { k = O(); if (f === this._currentPageNumber) { k.setAttribute("class", this._pageButtonActiveCss); k.style.fontWeight = "bold" } else { k.setAttribute("class", this._pageButtonNormalCss) } L = j.bind(this, [f]); k.onclick = L; k.innerHTML = f; C.appendChild(k); C.appendChild(A()) } if (this._currentPageNumber < l) { k = O(); k.setAttribute("class", this._pageButtonNormalCss); k.innerHTML = ">"; L = j.bind(this, [this._currentPageNumber + 1]); k.onclick = L; C.appendChild(k) } } this._grid.innerHTML = ""; this._grid.appendChild(w); if (this._hasPagination) { this._grid.appendChild(C) } if (this._bindInput) { _.call(this, H) } M(this._onGridLoaded); return this }, reDrawRow: function () { var e = arguments[0], n = t.querySelector("#" + this._gridID + "_dataRow_" + e), r = null; n.innerHTML = ""; r = D.call(this, e, null, false, null); n.innerHTML = r.dataRow.innerHTML; if (!z(this._onRowRedrawComplete)) { this._onRowRedrawComplete(this._dataSource, e) } _.call(this, r.inputBindings); return this }, setDataRowColors: function (e) { if (e.length && typeof e !== "[Object object]") this._dataRowBackColors = e; return this }, setCellPadding: function (e) { this._cellPadding = e; return this }, onRowAddition: function (e) { this._hasRowAddHandler = true; this._rowAddHandler = e; return this }, setMouseOverColor: function (e) { this._hasMouseOverColor = true; this._mouseOverColor = e; return this }, getDataUpdates: function () { var e = []; var t = this._dataChanges; for (var n in t) { e.push(n) } return e }, drawGridByPage: function (e) { if (!z(this._beforeGridPageChange)) this._beforeGridPageChange(e[0]); if (this._allowPageChange) { this._currentPageNumber = e[0]; M(this._onGridPageChange); this.reDraw() } return false } }; e["GridJS"] = r })(window, document)